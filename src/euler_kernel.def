/*  Copyright 2011-2013 Alexis Herault, Giuseppe Bilotta, Robert A. Dalrymple, Eugenio Rustico, Ciro Del Negro

    Istituto Nazionale di Geofisica e Vulcanologia
        Sezione di Catania, Catania, Italy

    Università di Catania, Catania, Italy

    Johns Hopkins University, Baltimore, MD

    This file is part of GPUSPH.

    GPUSPH is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GPUSPH is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GPUSPH.  If not, see <http://www.gnu.org/licenses/>.
*/

/* Euler kernel definitions */
// Predictor Corrector time integration
// - for step 1:
//	  v(n+1/2) = v(n) + f(n)*dt/2
//	  pos(n+1/2) = pos(n) + v(n)*dt/2
//
//	  We have oldVel = v(n), oldPos = pos(n), forces = f(n) so
//	  newVel = v(n+1/2) = oldVel + forces*dt/2
//	  newPos = pos(n+1/2) = oldPos + oldVel*dt/2
//
// - for step 2:
//	  vc(n+1/2) = v(n) + f(n+1/2)*dt/2
//	  posc(n+1/2) = pos(n) + vc(n+1/2)*dt/2
//	  then:
//	  v(n+1) = 2vc(n+1/2) - v(n) = v(n) + f(n+1/2)*dt
//	  pos(n+1) = 2posc(n+1/2) - pos(n) = pos(n) + vc(n+1/2)*dt
//
//	  Whe have oldVel = v(n), oldPos = pos(n), force = f(n+1/2),
//	  newVel = vel(n+1/2), newPos = pos(n+1/2) so
//	  we store velc = v(n) + f(n+1/2)*dt/2 then
//	  newPos = pos(n+1) = oldPos + velc*dt
//	  newVel = vel(n+1) = oldVel + forces*dt;

// Remember that for step 1 dt => dt/2 and for step 2 dt => dt !!!
// but dt2 is always equal to dt/2

template<int step, bool xsphcorr, bool dynbounds>
__global__ void
eulerDevice(
	const float4*	oldPos,
	const hashKey*	particleHash,
	const float4*	oldVel,
	const float*	oldTKE,
	const float*	oldEps,
	const particleinfo* info,
	const float4*	forces,
	float2*	keps_dkde,
	const float4*	xsph,
	float4*	newPos,
	float4*	newVel,
	float*	newTKE,
	float*	newEps,
	const uint	numParticles,
	const float	full_dt,
	const float	half_dt, /* full_dt/2 */
	const float	t)
{
	const int index = INTMUL(blockIdx.x,blockDim.x) + threadIdx.x;

	if (index >= numParticles)
		return;

	// we use dt/2 on the first step, the actual dt on the second step
	const float dt = (step == 1) ? half_dt : full_dt;

	// read particle data from sorted arrays
	// Euler does nothing to boundary particles apart
	// copying pos and vel in the new arrays, except in DYN_BOUNDARY
	// case (dynbounds == true)
	float4 pos = oldPos[index];		// always pos(n)
	float4 vel = oldVel[index];		// always vel(n)
	// TODO templatize better
	float keps_k = oldTKE ? oldTKE[index] : NAN;	// always k(n)
	float keps_e = oldEps ? oldEps[index] : NAN;	// always e(n)

	const particleinfo pinfo = info[index];
	const ParticleType ptype = static_cast<ParticleType>(PART_TYPE(pinfo));

	do {
		// we only integrate ACTIVE particles which are not BOUNDARY particles,
		// unless dynbounds is active (in which case BOUNDARY particles are also integrated)
		if (!ACTIVE(pos) || (ptype == PT_BOUNDARY && !dynbounds))
			break;

		const float4 force = forces[index];	// f(n) at step 1 and f(n+1/2) at step 2
		// mean XSPH velocity, only when XSPH is active
		// the compiler is smart enough to actually optimize this out
		// in the xsphcorr == false case
		const float4 mean_vel = xsphcorr ? xsph[index] : make_float4(0);
		/*
		   velc = vel if step == 1, but
		   velc = vel + forces[index]*dt/2.0f if step == 2
		 */
		const float4 velc = vel + (step - 1)*forces[index]*half_dt;

		// object index
		const int obj = object(pinfo);

		// Updating particle position
		switch (ptype) {
		case PT_FLUID:
			// add weighted mean_vel only in xsphcorr case
			// the compiler is smart enough to optimize it out
			// in the xsphcorr == false case
			pos.x += (velc.x + xsphcorr*d_epsxsph*mean_vel.x)*dt;
			pos.y += (velc.y + xsphcorr*d_epsxsph*mean_vel.y)*dt;
			pos.z += (velc.z + xsphcorr*d_epsxsph*mean_vel.z)*dt;

			// Updating particle velocity and density
			// For step 1:
			//	  vel = vel(n+1/2) = vel(n) + f(n)*dt/2
			// For step 2:
			//	  vel = vel(n+1) = vel(n) + f(n+1/2)*dt
			vel += dt*force;

			// Updating k and e for k-e model
			if (keps_dkde) {
				const float2 dkde = keps_dkde[index];
				keps_k += dt*dkde.x;
				keps_e += dt*dkde.y;
			}
			break;
		case PT_BOUNDARY:
			if (dynbounds)
				vel.w += dt*force.w;
			break;
		case PT_VERTEX:
			// Updating velocity for vertex particles, used to set boundary conditions in k-e model
			vel += dt*force;
			break;

		// Moving boundaries
		case PT_PISTON:
			// Updating positions for piston particles.
			// Now d_mbdata.x contains the piston velocity
			pos.x += d_mbdata[obj].x*dt;
			break;
		case PT_PADDLE:
			{
			// Updating postions for paddle particles
			const float3 absPos = d_worldOrigin + as_float3(pos) + calcGridPosFromParticleHash(particleHash[index])*d_cellSize + 0.5f*d_cellSize;
			const float2 relPos = make_float2(absPos.x - d_mbdata[obj].x, absPos.z - d_mbdata[obj].y);
			const float c = cos(d_mbdata[obj].z*dt) - 1.0f;
			const float s = sin(d_mbdata[obj].z*dt);
			// Apply rotation around y axis
			pos.x += c*relPos.x + s*relPos.y;
			pos.z += -s*relPos.x + c*relPos.y;
			}
			break;
		case PT_GATE:
			// Updating positions for gate particles
			// mbdata.x,y,z contains gate velocity
			as_float3(pos) += as_float3(d_mbdata[obj])*dt;
			break;
		case PT_OBJECT:
			vel.w += dt*force.w;
			if (step == 2) {
				// Applying center of gravity translation
				pos.x += d_rbtrans[obj].x;
				pos.y += d_rbtrans[obj].y;
				pos.z += d_rbtrans[obj].z;

				// Applying rotation around center of gravity
				const float3 relPos = d_worldOrigin + as_float3(pos) + calcGridPosFromParticleHash(particleHash[index])*d_cellSize + 0.5f*d_cellSize - d_rbcg[obj];
				applyrot(&d_rbsteprot[9*obj], relPos, pos);

				// Computing particles velocity
				// V(P) = V(Cg) + PCg^omega
				as_float3(vel) = d_rblinearvel[obj] + cross(d_rbangularvel[obj], relPos);
			}
			break;
		case PT_TESTPOINT:
			/* TODO */
			break;
		}
	} while (0);

	newPos[index] = pos;
	newVel[index] = vel;
	if (newTKE)
		newTKE[index] = keps_k;
	if (newEps)
		newEps[index] = keps_e;
}

/* vi:set ft=cuda: */
